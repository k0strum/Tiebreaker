services:
  # DB 서비스 (동일)
  db:
    image: mysql:8.0
    container_name: tiebreak-db-dev
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    ports:
      - "3307:3306"  # 호스트 포트 : 컨테이너 포트
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: tiebreak_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db-data:/var/lib/mysql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Zookeeper 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka 서비스
  kafka:
    image: confluentinc/cp-kafka:7.7.4
    container_name: kafka
    ports:
      - "9092:9092" # 외부에서 Kafka에 접속할 때 사용할 포트
    depends_on:
      - zookeeper # Zookeeper가 실행된 후에 Kafka가 실행되도록 설정
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # 컨테이너 시작 후 healthcheck를 30초 뒤부터 시작

  # 개발용 API 서버 (Spring Boot DevTools)
  api-server:
    build:
      context: ./api-server
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./api-server/src:/app/src
      - ./api-server/pom.xml:/app/pom.xml
      - /app/target # target 폴더는 동기화에서 제외
      - uploads-data:/app/uploads # 파일 업로드 디렉토리
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
      - JAVA_OPTS=-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true
      - JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 30s
      retries: 5

  # 개발용 데이터 수집 서버 (Flask 개발 모드)
  data-collector:
    build: ./data-collector
    ports:
      - "5001:5000"
    volumes:
      - ./data-collector:/app
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=0
    depends_on:
      - kafka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      timeout: 30s
      retries: 5

  # 개발용 프론트엔드 (Vite 개발 서버)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules # node_modules는 동기화에서 제외
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      api-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      timeout: 30s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

volumes:
  db-data:
  uploads-data:
