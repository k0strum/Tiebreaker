Tiebreaker
                      KBO 팬 플랫폼 프로젝트 계획서
--------------------------------------------------------------------------------

1. 프로젝트명: 타이브레이커 (Tiebreaker)

--------------------------------------------------------------------------------

2. 프로젝트 개요

   흩어져 있는 KBO 경기 정보, 선수 기록, 팬 커뮤니티를 하나의 공간에 통합하고,
   실시간 소통과 데이터 기록의 재미를 더한 차세대 KBO 팬 플랫폼입니다.

--------------------------------------------------------------------------------

3. 주요 기능 (Features)

   A. 데이터/기록
      - 선수 기록실: 시즌/통산 성적, 개인 프로필, 수상 내역 등 조회.
                    월별/연도별 성적 추이 등 데이터 시각화 제공.
      - 세이버메트릭스 스탯: WAR, wOBA 등 세이버매트릭스 기반 계산식을 통해
                           선수별 심층 지표 제공.

   B. 실시간 소통
      - 실시간 스코어보드: 현재 진행 중인 경기의 상황(스코어, 주자, SBO)
                          실시간 제공.
      - 경기별 다중 채팅방: 각 경기마다 생성되는 실시간 채팅방에서
                           팬들 간의 응원 및 정보 교류.

   C. AI 챗봇
      - AI 정보 챗봇: 선수 기록, 경기 일정 등 간단한 야구 정보를
                     실시간으로 확인하는 챗봇.

--------------------------------------------------------------------------------

4. 기술 스택 (Tech Stack)

   A. Frontend (웹 UI/UX)
      - 기술: Vite + React, TailwindCSS
      - 역할/선정 이유: 빠른 개발 속도와 동적 렌더링을 제공.
                       다양한 기능의 화면을 효율적으로 구현합니다.

   B. Backend (메인 API 서버)
      - 기술: Spring Boot, JPA, Java
      - 역할/선정 이유: 안정적인 비즈니스 로직 처리.
                       세이버메트릭스 계산, 승부 예측, 마일리지 시스템,
                       경매 로직, AI 챗봇 연동 등 핵심 기능을 담당합니다.

   C. Data Collector (데이터 수집 서버)
      - 기술: Python Flask
      - 역할/선정 이유: 외부 사이트에서 경기 및 선수 데이터를 크롤링.
                       세이버메트릭스 계산에 필요한 원본 데이터를 수집합니다.

   D. Database (영구 데이터 저장)
      - 기술: MySQL
      - 역할/선정 이유: 선수/경기 기록, 회원 정보, 승부 예측 내역,
                       마일리지 정보, 경매 물품 및 입찰 기록 등
                       정형 데이터를 저장합니다.

   E. Real-time (실시간 통신)
      - 기술: WebSocket, SSE
      - 역할/선정 이유: SSE는 스코어보드 정보를, WebSocket은 채팅을
                       클라이언트에 전달합니다.

   F. Inter-server (서버 간 통신)
      - 기술: Kafka
      - 역할/선정 이유: 데이터 수집 서버와 메인 서버 간 안정적인
                       비동기 데이터 파이프라인을 구축해 트래픽을
                       효율적으로 관리합니다.

--------------------------------------------------------------------------------

5. 시스템 아키텍처 (System Architecture)

   핵심: 각 서버의 역할을 명확히 분리하여 안정성과 확장성을 확보합니다.

   [사용자 (Vite + React)]
      ↑  | (API 요청, WebSocket, SSE)
      |  ↓
   [메인 API 서버 (Spring Boot)]                                        [DBMS (Mysql)]
        - REST API 제공 (선수 기록, 스코어북, 게시판 CRUD)         <---   - 사이트의 회원 정보 등의 정보 저장 & 관리
        - WebSocket (실시간 채팅) / SSE (실시간 스코어보드) 처리   --->   - 파이프라인을 통해 전송받은 데이터 저장
        - Kafka Consumer: 외부 경기 & 선수 데이터 수신
            |  ↑
 (API 요청) |  | (Kafka 파이프라인)
            v  |
   [데이터 수집 서버 (Python)]
        - Kafka Producer: 경기/선수 데이터 발행
        |
        | (주기적 데이터 크롤링)
        v
   [외부 야구 데이터 사이트]

--------------------------------------------------------------------------------

6. 추가 확장 예정

      - 나만의 스코어북: 사용자가 직접 경기 플레이를 기록하고 저장.
                         개인 기록 저장 및 타인과 공유 기능.
      - 승부 예측: 경기 결과 예측 및 적중 시 활동 마일리지 적립.
      - 마일리지 경매: 적립한 마일리지를 사용하여 구단 관련 상품 등에
                      입찰하는 경매 시스템.

--------------------------------------------------------------------------------
