services:
  # DB 서비스
  db:
    image: mysql:8.0
    container_name: tiebreak-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: tiebreak_db
      MYSQL_USER: k0strum
      MYSQL_PASSWORD: 000217
    volumes:
      - db-data:/var/lib/mysql

  # Zookeeper 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka 서비스
  kafka:
    image: confluentinc/cp-kafka:7.7.4
    container_name: kafka
    ports:
      - "9092:9092" # 외부에서 Kafka에 접속할 때 사용할 포트
    depends_on:
      - zookeeper # Zookeeper가 실행된 후에 Kafka가 실행되도록 설정
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  # 메인 API 서버 (Spring Boot)
  api-server:
    build: ./api-server
    ports:
      - "8080:8080" # 내 PC 8080 -> 컨테이너 8080
    volumes:
      - ./api-server/src:/app/src
      - /app/target # target 폴더는 동기화에서 제외
      - uploads-data:/app/uploads # 파일 업로드 디렉토리
    depends_on:
      - db
      - kafka

  # 데이터 수집 서버 (Python Flask)
  data-collector:
    build: ./data-collector
    ports:
      - "5001:5000" # 내 PC 5001 -> 컨테이너 5000
    volumes:
      - ./data-collector:/app
    depends_on:
      - kafka
    restart: unless-stopped

  # 프론트엔드 서버 (React + Nginx)
  frontend:
    build: ./frontend
    ports:
      - "5173:80" # 내 PC 5173 -> 컨테이너 80 (Nginx 기본 포트)
    volumes:
      - ./frontend:/app
      - /app/node_modules # node_modules는 동기화에서 제외
    depends_on: # api-server가 실행된 후에 frontend가 실행되도록 설정
      - api-server

volumes:
  db-data:
  uploads-data: